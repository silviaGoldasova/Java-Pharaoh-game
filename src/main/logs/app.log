08:14:34 INFO  [com.goldasil.pjv.MoveStateHandler] - [MoveStateDTO{state=SEVEN_HEARTS_RETURN_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW, null]}, MoveStateDTO{state=ACES_ONLY, neighbours=[PASS, ACES_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, ACE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_ACORNS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_BELLS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_HEARTS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_LEAVES, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=UNDERKNAVE_LEAVES_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=NONSPECIAL_SITUATION, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=LOOKING_FOR_SEVEN_HEARTS_RETURN, neighbours=[SEVEN_HEARTS_RETURN_PLAYED]}, MoveStateDTO{state=SEVENS_PLAYED, neighbours=[SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, null, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED]}, MoveStateDTO{state=HEARTS_PLAYED, neighbours=[HEARTS_PLAYED]}, MoveStateDTO{state=LEAVES_PLAYED, neighbours=[LEAVES_PLAYED]}, MoveStateDTO{state=BELLS_PLAYED, neighbours=[BELLS_PLAYED]}, MoveStateDTO{state=ACORNS_PLAYED, neighbours=[ACORNS_PLAYED]}, MoveStateDTO{state=SEVEN_PLAYED, neighbours=[SEVEN_PLAYED]}, MoveStateDTO{state=EIGHT_PLAYED, neighbours=[EIGHT_PLAYED]}, MoveStateDTO{state=NINE_PLAYED, neighbours=[NINE_PLAYED]}, MoveStateDTO{state=TEN_PLAYED, neighbours=[TEN_PLAYED]}, MoveStateDTO{state=UNDERKNAVE_PLAYED, neighbours=[UNDERKNAVE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_PLAYED, neighbours=[OVERKNAVE_PLAYED]}, MoveStateDTO{state=KING_PLAYED, neighbours=[KING_PLAYED]}, MoveStateDTO{state=ACE_PLAYED, neighbours=[ACE_PLAYED]}]
08:14:34 DEBUG [com.goldasil.pjv.models.RandomPlayer] - valid card: Card obj: rank: EIGHT, suit: ACORNS
08:14:34 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: EIGHT, suit: ACORNS]
08:14:34 DEBUG [com.goldasil.pjv.models.RandomPlayer] - valid card: Card obj: rank: NINE, suit: ACORNS
08:14:34 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: NINE, suit: ACORNS]
08:14:34 DEBUG [com.goldasil.pjv.models.RandomPlayer] - valid card: Card obj: rank: KING, suit: ACORNS
08:14:34 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:14:34 DEBUG [com.goldasil.pjv.models.RandomPlayer] - List of possible moves: [[Card obj: rank: EIGHT, suit: ACORNS], [Card obj: rank: NINE, suit: ACORNS], [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]]
08:20:00 INFO  [com.goldasil.pjv.MoveStateHandler] - [MoveStateDTO{state=SEVEN_HEARTS_RETURN_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW, null]}, MoveStateDTO{state=ACES_ONLY, neighbours=[PASS, ACES_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, ACE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_ACORNS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_BELLS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_HEARTS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_LEAVES, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=UNDERKNAVE_LEAVES_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=NONSPECIAL_SITUATION, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=LOOKING_FOR_SEVEN_HEARTS_RETURN, neighbours=[SEVEN_HEARTS_RETURN_PLAYED]}, MoveStateDTO{state=SEVENS_PLAYED, neighbours=[SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, null, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED]}, MoveStateDTO{state=HEARTS_PLAYED, neighbours=[HEARTS_PLAYED]}, MoveStateDTO{state=LEAVES_PLAYED, neighbours=[LEAVES_PLAYED]}, MoveStateDTO{state=BELLS_PLAYED, neighbours=[BELLS_PLAYED]}, MoveStateDTO{state=ACORNS_PLAYED, neighbours=[ACORNS_PLAYED]}, MoveStateDTO{state=SEVEN_PLAYED, neighbours=[SEVEN_PLAYED]}, MoveStateDTO{state=EIGHT_PLAYED, neighbours=[EIGHT_PLAYED]}, MoveStateDTO{state=NINE_PLAYED, neighbours=[NINE_PLAYED]}, MoveStateDTO{state=TEN_PLAYED, neighbours=[TEN_PLAYED]}, MoveStateDTO{state=UNDERKNAVE_PLAYED, neighbours=[UNDERKNAVE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_PLAYED, neighbours=[OVERKNAVE_PLAYED]}, MoveStateDTO{state=KING_PLAYED, neighbours=[KING_PLAYED]}, MoveStateDTO{state=ACE_PLAYED, neighbours=[ACE_PLAYED]}]
08:20:00 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: EIGHT, suit: ACORNS]
08:20:00 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: NINE, suit: ACORNS]
08:20:00 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:20:00 DEBUG [com.goldasil.pjv.models.RandomPlayer] - List of possible moves: [[Card obj: rank: EIGHT, suit: ACORNS], [Card obj: rank: NINE, suit: ACORNS], [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]]
08:20:00 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Number of possible moves3
08:20:00 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move2
08:21:30 INFO  [com.goldasil.pjv.MoveStateHandler] - [MoveStateDTO{state=SEVEN_HEARTS_RETURN_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW, null]}, MoveStateDTO{state=ACES_ONLY, neighbours=[PASS, ACES_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, ACE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_ACORNS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_BELLS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_HEARTS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_LEAVES, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=UNDERKNAVE_LEAVES_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=NONSPECIAL_SITUATION, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=LOOKING_FOR_SEVEN_HEARTS_RETURN, neighbours=[SEVEN_HEARTS_RETURN_PLAYED]}, MoveStateDTO{state=SEVENS_PLAYED, neighbours=[SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, null, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED]}, MoveStateDTO{state=HEARTS_PLAYED, neighbours=[HEARTS_PLAYED]}, MoveStateDTO{state=LEAVES_PLAYED, neighbours=[LEAVES_PLAYED]}, MoveStateDTO{state=BELLS_PLAYED, neighbours=[BELLS_PLAYED]}, MoveStateDTO{state=ACORNS_PLAYED, neighbours=[ACORNS_PLAYED]}, MoveStateDTO{state=SEVEN_PLAYED, neighbours=[SEVEN_PLAYED]}, MoveStateDTO{state=EIGHT_PLAYED, neighbours=[EIGHT_PLAYED]}, MoveStateDTO{state=NINE_PLAYED, neighbours=[NINE_PLAYED]}, MoveStateDTO{state=TEN_PLAYED, neighbours=[TEN_PLAYED]}, MoveStateDTO{state=UNDERKNAVE_PLAYED, neighbours=[UNDERKNAVE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_PLAYED, neighbours=[OVERKNAVE_PLAYED]}, MoveStateDTO{state=KING_PLAYED, neighbours=[KING_PLAYED]}, MoveStateDTO{state=ACE_PLAYED, neighbours=[ACE_PLAYED]}]
08:21:30 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: EIGHT, suit: ACORNS]
08:21:30 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: NINE, suit: ACORNS]
08:21:30 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:21:30 DEBUG [com.goldasil.pjv.models.RandomPlayer] - List of possible moves: [[Card obj: rank: EIGHT, suit: ACORNS], [Card obj: rank: NINE, suit: ACORNS], [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]]
08:21:30 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Number of possible moves3
08:21:30 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:21:30 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:24:40 INFO  [com.goldasil.pjv.MoveStateHandler] - [MoveStateDTO{state=SEVEN_HEARTS_RETURN_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW, null]}, MoveStateDTO{state=ACES_ONLY, neighbours=[PASS, ACES_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, ACE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_ACORNS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_BELLS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_HEARTS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_LEAVES, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=UNDERKNAVE_LEAVES_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=NONSPECIAL_SITUATION, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=LOOKING_FOR_SEVEN_HEARTS_RETURN, neighbours=[SEVEN_HEARTS_RETURN_PLAYED]}, MoveStateDTO{state=SEVENS_PLAYED, neighbours=[SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, null, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED]}, MoveStateDTO{state=HEARTS_PLAYED, neighbours=[HEARTS_PLAYED]}, MoveStateDTO{state=LEAVES_PLAYED, neighbours=[LEAVES_PLAYED]}, MoveStateDTO{state=BELLS_PLAYED, neighbours=[BELLS_PLAYED]}, MoveStateDTO{state=ACORNS_PLAYED, neighbours=[ACORNS_PLAYED]}, MoveStateDTO{state=SEVEN_PLAYED, neighbours=[SEVEN_PLAYED]}, MoveStateDTO{state=EIGHT_PLAYED, neighbours=[EIGHT_PLAYED]}, MoveStateDTO{state=NINE_PLAYED, neighbours=[NINE_PLAYED]}, MoveStateDTO{state=TEN_PLAYED, neighbours=[TEN_PLAYED]}, MoveStateDTO{state=UNDERKNAVE_PLAYED, neighbours=[UNDERKNAVE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_PLAYED, neighbours=[OVERKNAVE_PLAYED]}, MoveStateDTO{state=KING_PLAYED, neighbours=[KING_PLAYED]}, MoveStateDTO{state=ACE_PLAYED, neighbours=[ACE_PLAYED]}]
08:24:40 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: EIGHT, suit: ACORNS]
08:24:40 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: NINE, suit: ACORNS]
08:24:40 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:24:40 DEBUG [com.goldasil.pjv.models.RandomPlayer] - List of possible moves: [[Card obj: rank: EIGHT, suit: ACORNS], [Card obj: rank: NINE, suit: ACORNS], [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]]
08:24:40 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Number of possible moves3
08:24:40 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:24:40 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:24:40 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Returning : MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:24:40 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:24:40 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:27:03 INFO  [com.goldasil.pjv.MoveStateHandler] - [MoveStateDTO{state=SEVEN_HEARTS_RETURN_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW, null]}, MoveStateDTO{state=ACES_ONLY, neighbours=[PASS, ACES_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, ACE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_ACORNS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_BELLS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_HEARTS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_LEAVES, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=UNDERKNAVE_LEAVES_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=NONSPECIAL_SITUATION, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=LOOKING_FOR_SEVEN_HEARTS_RETURN, neighbours=[SEVEN_HEARTS_RETURN_PLAYED]}, MoveStateDTO{state=SEVENS_PLAYED, neighbours=[SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, null, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED]}, MoveStateDTO{state=HEARTS_PLAYED, neighbours=[HEARTS_PLAYED]}, MoveStateDTO{state=LEAVES_PLAYED, neighbours=[LEAVES_PLAYED]}, MoveStateDTO{state=BELLS_PLAYED, neighbours=[BELLS_PLAYED]}, MoveStateDTO{state=ACORNS_PLAYED, neighbours=[ACORNS_PLAYED]}, MoveStateDTO{state=SEVEN_PLAYED, neighbours=[SEVEN_PLAYED]}, MoveStateDTO{state=EIGHT_PLAYED, neighbours=[EIGHT_PLAYED]}, MoveStateDTO{state=NINE_PLAYED, neighbours=[NINE_PLAYED]}, MoveStateDTO{state=TEN_PLAYED, neighbours=[TEN_PLAYED]}, MoveStateDTO{state=UNDERKNAVE_PLAYED, neighbours=[UNDERKNAVE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_PLAYED, neighbours=[OVERKNAVE_PLAYED]}, MoveStateDTO{state=KING_PLAYED, neighbours=[KING_PLAYED]}, MoveStateDTO{state=ACE_PLAYED, neighbours=[ACE_PLAYED]}]
08:27:03 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: EIGHT, suit: ACORNS]
08:27:03 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: NINE, suit: ACORNS]
08:27:03 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:27:03 DEBUG [com.goldasil.pjv.models.RandomPlayer] - List of possible moves: [[Card obj: rank: EIGHT, suit: ACORNS], [Card obj: rank: NINE, suit: ACORNS], [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]]
08:27:03 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Number of possible moves3
08:27:03 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:27:03 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:27:03 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Returning : MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:27:03 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:27:03 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:27:03 DEBUG [RandomPlayerTest] - Test class - generated move: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:28:43 INFO  [com.goldasil.pjv.MoveStateHandler] - [MoveStateDTO{state=SEVEN_HEARTS_RETURN_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW, null]}, MoveStateDTO{state=ACES_ONLY, neighbours=[PASS, ACES_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, ACE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_ACORNS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_BELLS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_HEARTS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_LEAVES, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=UNDERKNAVE_LEAVES_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=NONSPECIAL_SITUATION, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=LOOKING_FOR_SEVEN_HEARTS_RETURN, neighbours=[SEVEN_HEARTS_RETURN_PLAYED]}, MoveStateDTO{state=SEVENS_PLAYED, neighbours=[SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, null, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED]}, MoveStateDTO{state=HEARTS_PLAYED, neighbours=[HEARTS_PLAYED]}, MoveStateDTO{state=LEAVES_PLAYED, neighbours=[LEAVES_PLAYED]}, MoveStateDTO{state=BELLS_PLAYED, neighbours=[BELLS_PLAYED]}, MoveStateDTO{state=ACORNS_PLAYED, neighbours=[ACORNS_PLAYED]}, MoveStateDTO{state=SEVEN_PLAYED, neighbours=[SEVEN_PLAYED]}, MoveStateDTO{state=EIGHT_PLAYED, neighbours=[EIGHT_PLAYED]}, MoveStateDTO{state=NINE_PLAYED, neighbours=[NINE_PLAYED]}, MoveStateDTO{state=TEN_PLAYED, neighbours=[TEN_PLAYED]}, MoveStateDTO{state=UNDERKNAVE_PLAYED, neighbours=[UNDERKNAVE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_PLAYED, neighbours=[OVERKNAVE_PLAYED]}, MoveStateDTO{state=KING_PLAYED, neighbours=[KING_PLAYED]}, MoveStateDTO{state=ACE_PLAYED, neighbours=[ACE_PLAYED]}]
08:28:43 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: EIGHT, suit: ACORNS]
08:28:43 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: NINE, suit: ACORNS]
08:28:43 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:28:43 DEBUG [com.goldasil.pjv.models.RandomPlayer] - List of possible moves: [[Card obj: rank: EIGHT, suit: ACORNS], [Card obj: rank: NINE, suit: ACORNS], [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]]
08:28:43 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Number of possible moves3
08:28:43 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:28:43 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:28:43 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Returning : MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:28:43 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:28:43 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:28:43 DEBUG [RandomPlayerTest] - Test class - generated move: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:28:43 DEBUG [com.goldasil.pjv.models.RandomPlayer] - moves in compare moves: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: HEARTS, Card obj: rank: KING, suit: LEAVES], drawCards: 0, MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:31:01 INFO  [com.goldasil.pjv.MoveStateHandler] - [MoveStateDTO{state=SEVEN_HEARTS_RETURN_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW, null]}, MoveStateDTO{state=ACES_ONLY, neighbours=[PASS, ACES_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, ACE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_ACORNS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_BELLS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_HEARTS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_LEAVES, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=UNDERKNAVE_LEAVES_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=NONSPECIAL_SITUATION, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=LOOKING_FOR_SEVEN_HEARTS_RETURN, neighbours=[SEVEN_HEARTS_RETURN_PLAYED]}, MoveStateDTO{state=SEVENS_PLAYED, neighbours=[SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, null, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED]}, MoveStateDTO{state=HEARTS_PLAYED, neighbours=[HEARTS_PLAYED]}, MoveStateDTO{state=LEAVES_PLAYED, neighbours=[LEAVES_PLAYED]}, MoveStateDTO{state=BELLS_PLAYED, neighbours=[BELLS_PLAYED]}, MoveStateDTO{state=ACORNS_PLAYED, neighbours=[ACORNS_PLAYED]}, MoveStateDTO{state=SEVEN_PLAYED, neighbours=[SEVEN_PLAYED]}, MoveStateDTO{state=EIGHT_PLAYED, neighbours=[EIGHT_PLAYED]}, MoveStateDTO{state=NINE_PLAYED, neighbours=[NINE_PLAYED]}, MoveStateDTO{state=TEN_PLAYED, neighbours=[TEN_PLAYED]}, MoveStateDTO{state=UNDERKNAVE_PLAYED, neighbours=[UNDERKNAVE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_PLAYED, neighbours=[OVERKNAVE_PLAYED]}, MoveStateDTO{state=KING_PLAYED, neighbours=[KING_PLAYED]}, MoveStateDTO{state=ACE_PLAYED, neighbours=[ACE_PLAYED]}]
08:31:01 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: EIGHT, suit: ACORNS]
08:31:01 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: NINE, suit: ACORNS]
08:31:01 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:31:01 DEBUG [com.goldasil.pjv.models.RandomPlayer] - List of possible moves: [[Card obj: rank: EIGHT, suit: ACORNS], [Card obj: rank: NINE, suit: ACORNS], [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]]
08:31:01 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Number of possible moves3
08:31:01 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:31:01 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:31:01 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Returning : MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:31:01 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:31:01 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:31:01 DEBUG [RandomPlayerTest] - Test class - generated move: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:31:01 DEBUG [com.goldasil.pjv.models.RandomPlayer] - moves in compare moves: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: HEARTS, Card obj: rank: KING, suit: LEAVES], drawCards: 0, MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:31:01 DEBUG [com.goldasil.pjv.models.RandomPlayer] - matches size : 3, moveA.move.size(): 3
08:32:36 INFO  [com.goldasil.pjv.MoveStateHandler] - [MoveStateDTO{state=SEVEN_HEARTS_RETURN_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW, null]}, MoveStateDTO{state=ACES_ONLY, neighbours=[PASS, ACES_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, ACE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_ACORNS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_BELLS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_HEARTS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_LEAVES, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=UNDERKNAVE_LEAVES_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=NONSPECIAL_SITUATION, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=LOOKING_FOR_SEVEN_HEARTS_RETURN, neighbours=[SEVEN_HEARTS_RETURN_PLAYED]}, MoveStateDTO{state=SEVENS_PLAYED, neighbours=[SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, null, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED]}, MoveStateDTO{state=HEARTS_PLAYED, neighbours=[HEARTS_PLAYED]}, MoveStateDTO{state=LEAVES_PLAYED, neighbours=[LEAVES_PLAYED]}, MoveStateDTO{state=BELLS_PLAYED, neighbours=[BELLS_PLAYED]}, MoveStateDTO{state=ACORNS_PLAYED, neighbours=[ACORNS_PLAYED]}, MoveStateDTO{state=SEVEN_PLAYED, neighbours=[SEVEN_PLAYED]}, MoveStateDTO{state=EIGHT_PLAYED, neighbours=[EIGHT_PLAYED]}, MoveStateDTO{state=NINE_PLAYED, neighbours=[NINE_PLAYED]}, MoveStateDTO{state=TEN_PLAYED, neighbours=[TEN_PLAYED]}, MoveStateDTO{state=UNDERKNAVE_PLAYED, neighbours=[UNDERKNAVE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_PLAYED, neighbours=[OVERKNAVE_PLAYED]}, MoveStateDTO{state=KING_PLAYED, neighbours=[KING_PLAYED]}, MoveStateDTO{state=ACE_PLAYED, neighbours=[ACE_PLAYED]}]
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: EIGHT, suit: ACORNS]
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: NINE, suit: ACORNS]
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - List of possible moves: [[Card obj: rank: EIGHT, suit: ACORNS], [Card obj: rank: NINE, suit: ACORNS], [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]]
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Number of possible moves3
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Returning : MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:32:36 DEBUG [RandomPlayerTest] - Test class - generated move: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - moves in compare moves: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: HEARTS, Card obj: rank: KING, suit: LEAVES], drawCards: 0, MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - matches size : 3, moveA.move.size(): 3
08:32:36 DEBUG [RandomPlayerTest] - result: true
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - moves in compare moves: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: HEARTS, Card obj: rank: KING, suit: LEAVES], drawCards: 0, MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:32:36 DEBUG [com.goldasil.pjv.models.RandomPlayer] - matches size : 3, moveA.move.size(): 3
08:32:42 DEBUG [TestMain] - TestMain method has started.
08:32:42 INFO  [com.goldasil.pjv.MoveStateHandler] - [MoveStateDTO{state=SEVEN_HEARTS_RETURN_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW, null]}, MoveStateDTO{state=ACES_ONLY, neighbours=[PASS, ACES_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, ACE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_ACORNS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_BELLS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_HEARTS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_LEAVES, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=UNDERKNAVE_LEAVES_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=NONSPECIAL_SITUATION, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=LOOKING_FOR_SEVEN_HEARTS_RETURN, neighbours=[SEVEN_HEARTS_RETURN_PLAYED]}, MoveStateDTO{state=SEVENS_PLAYED, neighbours=[SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, null, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED]}, MoveStateDTO{state=HEARTS_PLAYED, neighbours=[HEARTS_PLAYED]}, MoveStateDTO{state=LEAVES_PLAYED, neighbours=[LEAVES_PLAYED]}, MoveStateDTO{state=BELLS_PLAYED, neighbours=[BELLS_PLAYED]}, MoveStateDTO{state=ACORNS_PLAYED, neighbours=[ACORNS_PLAYED]}, MoveStateDTO{state=SEVEN_PLAYED, neighbours=[SEVEN_PLAYED]}, MoveStateDTO{state=EIGHT_PLAYED, neighbours=[EIGHT_PLAYED]}, MoveStateDTO{state=NINE_PLAYED, neighbours=[NINE_PLAYED]}, MoveStateDTO{state=TEN_PLAYED, neighbours=[TEN_PLAYED]}, MoveStateDTO{state=UNDERKNAVE_PLAYED, neighbours=[UNDERKNAVE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_PLAYED, neighbours=[OVERKNAVE_PLAYED]}, MoveStateDTO{state=KING_PLAYED, neighbours=[KING_PLAYED]}, MoveStateDTO{state=ACE_PLAYED, neighbours=[ACE_PLAYED]}]
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: EIGHT, suit: ACORNS]
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: NINE, suit: ACORNS]
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - List of possible moves: [[Card obj: rank: EIGHT, suit: ACORNS], [Card obj: rank: NINE, suit: ACORNS], [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]]
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Number of possible moves3
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Returning : MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:32:42 DEBUG [RandomPlayerTest] - Test class - generated move: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - moves in compare moves: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: HEARTS, Card obj: rank: KING, suit: LEAVES], drawCards: 0, MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - matches size : 3, moveA.move.size(): 3
08:32:42 DEBUG [RandomPlayerTest] - result: true
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - moves in compare moves: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: HEARTS, Card obj: rank: KING, suit: LEAVES], drawCards: 0, MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:32:42 DEBUG [com.goldasil.pjv.models.RandomPlayer] - matches size : 3, moveA.move.size(): 3
08:33:21 INFO  [com.goldasil.pjv.MoveStateHandler] - [MoveStateDTO{state=SEVEN_HEARTS_RETURN_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW, null]}, MoveStateDTO{state=ACES_ONLY, neighbours=[PASS, ACES_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, ACE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_ACORNS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_BELLS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_HEARTS, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=OVERKNAVE_LEAVES, neighbours=[OVERKNAVE, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, DRAW]}, MoveStateDTO{state=UNDERKNAVE_LEAVES_PLAYED, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=NONSPECIAL_SITUATION, neighbours=[NONSPECIAL_SITUATION, ACES_PLAYED, SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, SEVEN_HEARTS_RETURN_PLAYED, OVERKNAVE, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED, DRAW]}, MoveStateDTO{state=LOOKING_FOR_SEVEN_HEARTS_RETURN, neighbours=[SEVEN_HEARTS_RETURN_PLAYED]}, MoveStateDTO{state=SEVENS_PLAYED, neighbours=[SEVENS_PLAYED, UNDERKNAVE_LEAVES_PLAYED, null, HEARTS_PLAYED, LEAVES_PLAYED, BELLS_PLAYED, ACORNS_PLAYED]}, MoveStateDTO{state=HEARTS_PLAYED, neighbours=[HEARTS_PLAYED]}, MoveStateDTO{state=LEAVES_PLAYED, neighbours=[LEAVES_PLAYED]}, MoveStateDTO{state=BELLS_PLAYED, neighbours=[BELLS_PLAYED]}, MoveStateDTO{state=ACORNS_PLAYED, neighbours=[ACORNS_PLAYED]}, MoveStateDTO{state=SEVEN_PLAYED, neighbours=[SEVEN_PLAYED]}, MoveStateDTO{state=EIGHT_PLAYED, neighbours=[EIGHT_PLAYED]}, MoveStateDTO{state=NINE_PLAYED, neighbours=[NINE_PLAYED]}, MoveStateDTO{state=TEN_PLAYED, neighbours=[TEN_PLAYED]}, MoveStateDTO{state=UNDERKNAVE_PLAYED, neighbours=[UNDERKNAVE_PLAYED]}, MoveStateDTO{state=OVERKNAVE_PLAYED, neighbours=[OVERKNAVE_PLAYED]}, MoveStateDTO{state=KING_PLAYED, neighbours=[KING_PLAYED]}, MoveStateDTO{state=ACE_PLAYED, neighbours=[ACE_PLAYED]}]
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: EIGHT, suit: ACORNS]
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: NINE, suit: ACORNS]
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Pos move addded: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - List of possible moves: [[Card obj: rank: EIGHT, suit: ACORNS], [Card obj: rank: NINE, suit: ACORNS], [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]]
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Number of possible moves3
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Returning : MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Index of largest move 2
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - Largest move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS]
08:33:21 DEBUG [RandomPlayerTest] - Test class - generated move: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - moves in compare moves: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: HEARTS, Card obj: rank: KING, suit: LEAVES], drawCards: 0, MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - matches size : 3, moveA.move.size(): 3
08:33:21 DEBUG [RandomPlayerTest] - result: true
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - moves in compare moves: MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: HEARTS, Card obj: rank: KING, suit: LEAVES], drawCards: 0, MoveTypePLAY, move: [Card obj: rank: KING, suit: ACORNS, Card obj: rank: KING, suit: LEAVES, Card obj: rank: KING, suit: HEARTS], drawCards: 0
08:33:21 DEBUG [com.goldasil.pjv.models.RandomPlayer] - matches size : 3, moveA.move.size(): 3
